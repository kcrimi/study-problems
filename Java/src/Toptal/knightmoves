public static int knightMoves(int x, int y){
    x = Math.abs(x);
    y = Math.abs(y);
    mBoardMin = new int[Math.abs(x)+3][Math.abs(y)+3];
    Queue<int[]> toExplore = new LinkedList<int[]>();
    toExplore.add(new int[2]);
    while (!(toExplore.peek()[0] == x && toExplore.peek()[1] == y)) {
        int[] current = toExplore.remove();
        for (int i = 0; i < validMoves.size(); i++){
            int childX = Math.abs(current[0]+validMoves.get(i).get(0));
            int childY = Math.abs(current[1]+validMoves.get(i).get(1));
            if (childX < mBoardMin.length 
            && childY < mBoardMin[0].length 
            && mBoardMin[childX][childY] == 0
            && !(childX == 0 && childY == 0)){
                mBoardMin[childX][childY] = mBoardMin[current[0]][current[1]] + 1;
                int[] child = new int[2];
                child[0] = childX;
                child[1] = childY;
                toExplore.add(child);
            }
        }
    }
    return mBoardMin[x][y];
}