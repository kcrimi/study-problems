import java.util.*;
public class HelloWorld{
    
     public static void main(String []args){
        // testSplitPoint();
        // testToNegabinary();
        // testKnightMoves();
        // int x = 1;
        // int y = 1;
        // System.out.println("intput="+x+","+y+" output="+knightMoves(x,y));
        // printBoard();
     }
     
    public static void testKnightMoves(){
        Random rand = new Random();
        for (int i = 0; i < 10; i++){
            int x = rand.nextInt(10);
            int y = rand.nextInt(10);
            System.out.println("intput="+x+","+y+" output="+knightMoves(x,y));
            printBoard();
        }
    }
    
    private static int[][] mBoardMin;
    private static List<List<Integer>> validMoves= Arrays.asList(
        Arrays.asList(-1,-2),
        Arrays.asList(-2,-1),
        Arrays.asList(-2,1),
        Arrays.asList(-1,2),
        Arrays.asList(1,2),
        Arrays.asList(2,1),
        Arrays.asList(2,-1),
        Arrays.asList(1,-2));
    
    public static int knightMoves(int x, int y){
        x = Math.abs(x);
        y = Math.abs(y);
        mBoardMin = new int[Math.abs(x)+3][Math.abs(y)+3];
        Queue<int[]> toExplore = new LinkedList<int[]>();
        toExplore.add(new int[2]);
        while (!(toExplore.peek()[0] == x && toExplore.peek()[1] == y)) {
            int[] current = toExplore.remove();
            for (int i = 0; i < validMoves.size(); i++){
                int childX = Math.abs(current[0]+validMoves.get(i).get(0));
                int childY = Math.abs(current[1]+validMoves.get(i).get(1));
                if (childX < mBoardMin.length 
                && childY < mBoardMin[0].length 
                && mBoardMin[childX][childY] == 0
                && !(childX == 0 && childY == 0)){
                    mBoardMin[childX][childY] = mBoardMin[current[0]][current[1]] + 1;
                    int[] child = new int[2];
                    child[0] = childX;
                    child[1] = childY;
                    toExplore.add(child);
                }
            }
        }
        return mBoardMin[x][y];
    }
    
    public static void printBoard(){
        for (int i =0;i <mBoardMin.length;i++){
            System.out.println(Arrays.toString(mBoardMin[i]));
        }
    }
     
     public static void testToNegabinary(){
         for (int n = -10; n <=10; n++){
            System.out.println("input="+n+" output="+toNegabinary(n));
         }
     }
     
    public static String toNegabinary(int x){
        String output = "";
        if ( x==0 ) {
            output = "0";
        }
        int bitValue = -2;
        while(x != 0){
            int newBit = (x % bitValue) * Integer.signum(x*bitValue);
            output = (Math.min(1,Math.abs(newBit)))+output;
            x += newBit;
            bitValue *= -2;
        }
        return output;
    }
     
     private static void testSplitPoint(){
        int[][] test = new int[10][4];
        Random rand = new Random();
        for (int i = 0;i< 10;i++){
            for (int j = 0; j < 4; j++){
                test[i][j] = rand.nextInt(2);
            }
        }
        for (int[] t : test){
            System.out.println("input="+Arrays.toString(t)+" output="+splitPoint(t,1));
        }
     }
     
     public static int splitPoint(int[] a, int x) {
         int breakPoint = 0;
         int pointer = a.length -1;
         if (a.length == 0) { return -1;}
         while (pointer >= breakPoint) {
            if (a[breakPoint] == x && a[pointer] == x){ // 1 1
                pointer--;
            } else if (a[breakPoint] != x && a[pointer] != x){ // 0 0
                breakPoint++;
            } else { // 0 1  || 1 0
                breakPoint++;
                pointer--;
            }
         }
         return breakPoint;
     }
     
}
