    public static int knightMoves(int x, int y){
        mBoardMin = new int[Math.abs(x)+3][Math.abs(y)+3];
        return minMoves(x,y);
    }
     
    public static int minMoves(int x, int y){
        x = Math.abs(x);
        y = Math.abs(y);
        List<Integer> xMove = Arrays.asList(-1, -2, -2, -1, 1, 2);
        List<Integer> yMove = Arrays.asList(2, 1, -1, -2, -2, -1);
        // System.out.println(x+" "+y);
        if ((x == 0 && y == 0) || mBoardMin[x][y] > 0){
            return mBoardMin[x][y];
        }
        mBoardMin[x][y] = -1;
        int minFromHere = -1;
        for (int i = 0; i < xMove.size(); i++) {
            // System.out.println("x="+x+" y="+y+" xMove="+xMove.get(i)+" yMove="+yMove.get(i)+" xlen="+mBoardMin.length+" ylen="+mBoardMin[0].length);
            if (x+xMove.get(i) < mBoardMin.length 
                && y+yMove.get(i) < mBoardMin[0].length 
                && mBoardMin[Math.abs(x+xMove.get(i))][Math.abs(y+yMove.get(i))] != -1){
                int nextMin = minMoves(x+xMove.get(i), y+yMove.get(i));
                // printBoard();
                if (minFromHere == -1) {
                    minFromHere = nextMin;
                } else if (nextMin >=0 ){
                    minFromHere = Math.min(minFromHere, minMoves(x+xMove.get(i), y+yMove.get(i)));
                }
            }
        }
        mBoardMin[x][y] = minFromHere >= 0 ? minFromHere + 1 : minFromHere;
        return mBoardMin[x][y];
    }